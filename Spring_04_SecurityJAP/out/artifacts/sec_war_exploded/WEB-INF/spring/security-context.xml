<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

<!--   Spring security 에 내장된 암호 검사 코드에서 사용할 bean-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg index="0" value="4"/>
    </bean>
<!--
HTTP 테스트 환경에서 csrf 관련 ToKen 을 form에 부착시키기 위한 Helper class를 bean 설정
이 bean은 http:csrf 속성에 부착한다
-->
    <bean id="cookieCsrfTokenRepository" class="org.springframework.security.web.csrf.CookieCsrfTokenRepository">
        <property name="cookieHttpOnly" value="false"/>
    </bean>
<!--    최소한의 security 설정-->
<!--    login으로 요청되는 패턴은 누구나 들어갈 수 있지만 다른 패턴은 들어갈 수 없게 한다.-->
<!--   isAuthenticated가 true 이면 login화면이 나타나게 됨? -->

<!--    이 폴더에 접근하게 되면 security를 무시하라-->
    <security:http pattern="/static" security="none"/>
    <security:http pattern= "/webjars/**" security="none"/>

<!--    permit을 인식못할 때는 true를 써주면 문제가 없어진다.-->
    <security:http use-expressions="true">
        <security:intercept-url pattern="/login" access="permitAll"/>
<!--        mypage로 이동했을 때만 security가 감시하고 나머지 url로 진행할 때는 그냥 보내주기-->
        <security:intercept-url pattern="/member/mypage" access="isAuthenticated()"/>
        <security:intercept-url pattern="/member/**" access="permitAll"/>
<!--        <security:intercept-url pattern="/member/login" access="permitAll"/>-->
<!--        <security:intercept-url pattern="/member/join" access="permitAll"/>-->
        <security:intercept-url pattern="/static" access="permitAll"/>
        <security:intercept-url pattern="/webjars/**" access="permitAll"/>
        <security:intercept-url pattern="/" access="isAuthenticated()"/>
        <security:logout/>
<!--        disabled ="true" 은 세션을 무력화 하는 기능이기 때문에 이걸 사용하지 않는다면 true로 기본적용이 됨-->
<!--        위에서 만든 bean을 여기에 부착해줌-->
        <security:csrf
                token-repository-ref="cookieCsrfTokenRepository"/>
        <!--                login page는 login페이지로 이동했을 시 보이게 하겠다.-->
<!--        우리가 만든 custom page를 사용하겠다.-->
        <security:form-login
                login-page="/member/login"
                login-processing-url="/login"
                username-parameter="username" password-parameter="password" />
    </security:http>


<!--    <bean id="loginService" class="com.callor.sec.service.auth.LoginService"/>-->
<!--   security 내에서만 사용하는 component scan / service.auth를 스캔해서 사용하겠다!-->
    <context:component-scan base-package="com.callor.sec.service.auth"/>
        <security:authentication-manager>
            <security:authentication-provider
                user-service-ref="loginService"/>
            </security:authentication-manager>

<!--&lt;!&ndash;    test용 로그인 사용자 설정&ndash;&gt;-->
<!--    <security:authentication-manager>-->
<!--        <security:authentication-provider>-->
<!--            <security:user-service>-->
<!--                <security:user name="callor"-->
<!--                               authorities="ROLE_ADMIN"-->
<!--                               password="{noop}1234"/>-->
<!--            </security:user-service>-->
<!--        </security:authentication-provider>-->
<!--    </security:authentication-manager>-->
</beans>